var documenterSearchIndex = {"docs":
[{"location":"dev_env_info/#Development-Environment-Information","page":"Development Environment Information","title":"Development Environment Information","text":"","category":"section"},{"location":"dev_env_info/#Recent-Update","page":"Development Environment Information","title":"Recent Update","text":"","category":"section"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"The hardware has been updated for this project recently. The new NVIDIA GeForce Series has been launched to continue implementation and testing of this project. Here is the detailed environment information for this project now.","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"The following shows the specific CPU information.","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"huiyu@huiyuxps15:~$ lscpu\nArchitecture:            x86_64\n  CPU op-mode(s):        32-bit, 64-bit\n  Address sizes:         46 bits physical, 48 bits virtual\n  Byte Order:            Little Endian\nCPU(s):                  20\n  On-line CPU(s) list:   0-19\nVendor ID:               GenuineIntel\n  Model name:            13th Gen Intel(R) Core(TM) i9-13900H\n    CPU family:          6\n    Model:               186\n    Thread(s) per core:  2\n    Core(s) per socket:  10\n    Socket(s):           1\n    Stepping:            2\n    BogoMIPS:            5990.39\n    Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse ss\n                         e2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology tsc_reliable nonstop\n                         _tsc cpuid pni pclmulqdq vmx ssse3 fma cx16 sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_time\n                         r aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch ssbd ibrs ibpb stibp ibrs_enha\n                         nced tpr_shadow vnmi ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdsee\n                         d adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves avx_vnni umip waitpkg gfni vae\n                         s vpclmulqdq rdpid movdiri movdir64b fsrm md_clear serialize flush_l1d arch_capabilities\nVirtualization features:\n  Virtualization:        VT-x\n  Hypervisor vendor:     Microsoft\n  Virtualization type:   full\nCaches (sum of all):\n  L1d:                   480 KiB (10 instances)\n  L1i:                   320 KiB (10 instances)\n  L2:                    12.5 MiB (10 instances)\n  L3:                    24 MiB (1 instance)\nVulnerabilities:\n  Gather data sampling:  Not affected\n  Itlb multihit:         Not affected\n  L1tf:                  Not affected\n  Mds:                   Not affected\n  Meltdown:              Not affected\n  Mmio stale data:       Not affected\n  Retbleed:              Mitigation; Enhanced IBRS\n  Spec rstack overflow:  Not affected\n  Spec store bypass:     Mitigation; Speculative Store Bypass disabled via prctl and seccomp\n  Spectre v1:            Mitigation; usercopy/swapgs barriers and __user pointer sanitization\n  Spectre v2:            Mitigation; Enhanced IBRS, IBPB conditional, RSB filling, PBRSB-eIBRS SW sequence\n  Srbds:                 Not affected\n  Tsx async abort:       Not affected","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"The following shows the specific GPU information.","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"huiyu@huiyuxps15:~$ nvidia-smi\nThu May 16 17:26:16 2024\n+---------------------------------------------------------------------------------------+\n| NVIDIA-SMI 545.23.07              Driver Version: 546.12       CUDA Version: 12.3     |\n|-----------------------------------------+----------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n|                                         |                      |               MIG M. |\n|=========================================+======================+======================|\n|   0  NVIDIA GeForce RTX 4060 ...    On  | 00000000:01:00.0 Off |                  N/A |\n| N/A   43C    P3              11W /  45W |      0MiB /  8188MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n\n+---------------------------------------------------------------------------------------+\n| Processes:                                                                            |\n|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n|        ID   ID                                                             Usage      |\n|=======================================================================================|\n|  No running processes found                                                           |\n+---------------------------------------------------------------------------------------+","category":"page"},{"location":"dev_env_info/#Legacy-(AWS)","page":"Development Environment Information","title":"Legacy (AWS)","text":"","category":"section"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"This project were implemented and tested on AWS EC2 instances. So far, types of EC2 instances used in this project include: p3.2xlarge (single-GPU) and g4dn.12xlarge (multi-GPU). For more information about the EC2 instances, please refer to AWS EC2 Instance Types.","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"The following information is about the environment of the EC2 instances used in this project.","category":"page"},{"location":"dev_env_info/#AWS-p3.2xlarge","page":"Development Environment Information","title":"AWS p3.2xlarge","text":"","category":"section"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"The following shows the specific CPU information of the p3.2xlarge instance used in this project.","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"ubuntu@ip-172-31-7-163:~/trixi_cuda$ lscpu\nArchitecture:            x86_64\n  CPU op-mode(s):        32-bit, 64-bit\n  Address sizes:         46 bits physical, 48 bits virtual\n  Byte Order:            Little Endian\nCPU(s):                  8\n  On-line CPU(s) list:   0-7\nVendor ID:               GenuineIntel\n  Model name:            Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz\n    CPU family:          6\n    Model:               79\n    Thread(s) per core:  2\n    Core(s) per socket:  4\n    Socket(s):           1\n    Stepping:            1\n    CPU max MHz:         3000.0000\n    CPU min MHz:         1200.0000\n    BogoMIPS:            4600.04\n    Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscal\n                         l nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni\n                          pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdra\n                         nd hypervisor lahf_lm abm 3dnowprefetch cpuid_fault invpcid_single pti fsgsbase bmi1 hle avx2 smep bmi2 erm\n                         s invpcid rtm rdseed adx xsaveopt\nVirtualization features: \n  Hypervisor vendor:     Xen\n  Virtualization type:   full\nCaches (sum of all):     \n  L1d:                   128 KiB (4 instances)\n  L1i:                   128 KiB (4 instances)\n  L2:                    1 MiB (4 instances)\n  L3:                    45 MiB (1 instance)\nNUMA:                    \n  NUMA node(s):          1\n  NUMA node0 CPU(s):     0-7\nVulnerabilities:         \n  Itlb multihit:         KVM: Mitigation: VMX unsupported\n  L1tf:                  Mitigation; PTE Inversion\n  Mds:                   Vulnerable: Clear CPU buffers attempted, no microcode; SMT Host state unknown\n  Meltdown:              Mitigation; PTI\n  Mmio stale data:       Vulnerable: Clear CPU buffers attempted, no microcode; SMT Host state unknown\n  Retbleed:              Not affected\n  Spec store bypass:     Vulnerable\n  Spectre v1:            Mitigation; usercopy/swapgs barriers and __user pointer sanitization\n  Spectre v2:            Mitigation; Retpolines, STIBP disabled, RSB filling, PBRSB-eIBRS Not affected\n  Srbds:                 Not affected\n  Tsx async abort:       Vulnerable: Clear CPU buffers attempted, no microcode; SMT Host state unknown","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"The following shows the specific GPU information of the p3.2xlarge instance used in this project.","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"ubuntu@ip-172-31-7-163:~/trixi_cuda$ nvidia-smi\nSat Aug 26 00:38:06 2023       \n+---------------------------------------------------------------------------------------+\n| NVIDIA-SMI 530.30.02              Driver Version: 530.30.02    CUDA Version: 12.1     |\n|-----------------------------------------+----------------------+----------------------+\n| GPU  Name                  Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf            Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                                         |                      |               MIG M. |\n|=========================================+======================+======================|\n|   0  Tesla V100-SXM2-16GB            On | 00000000:00:1E.0 Off |                    0 |\n| N/A   47C    P0               25W / 300W|      0MiB / 16384MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n                                                                                         \n+---------------------------------------------------------------------------------------+\n| Processes:                                                                            |\n|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n|        ID   ID                                                             Usage      |\n|=======================================================================================|\n|  No running processes found                                                           |\n+---------------------------------------------------------------------------------------+","category":"page"},{"location":"dev_env_info/#AWS-g4dn.12xlarge","page":"Development Environment Information","title":"AWS g4dn.12xlarge","text":"","category":"section"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"The following shows the specific CPU information of the g4dn.12xlarge instance used in this project.","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"ubuntu@ip-172-31-4-230:~/trixi_cuda$ lscpu\nArchitecture:            x86_64\n  CPU op-mode(s):        32-bit, 64-bit\n  Address sizes:         46 bits physical, 48 bits virtual\n  Byte Order:            Little Endian\nCPU(s):                  48\n  On-line CPU(s) list:   0-47\nVendor ID:               GenuineIntel\n  Model name:            Intel(R) Xeon(R) Platinum 8259CL CPU @ 2.50GHz\n    CPU family:          6\n    Model:               85\n    Thread(s) per core:  2\n    Core(s) per socket:  24\n    Socket(s):           1\n    Stepping:            7\n    BogoMIPS:            4999.99\n    Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clf\n                         lush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch\n                         _perfmon rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_fre\n                         q pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popc\n                         nt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dno\n                         wprefetch invpcid_single pti fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms i\n                         nvpcid mpx avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512\n                         bw avx512vl xsaveopt xsavec xgetbv1 xsaves ida arat pku ospke avx512_vnni\nVirtualization features: \n  Hypervisor vendor:     KVM\n  Virtualization type:   full\nCaches (sum of all):     \n  L1d:                   768 KiB (24 instances)\n  L1i:                   768 KiB (24 instances)\n  L2:                    24 MiB (24 instances)\n  L3:                    35.8 MiB (1 instance)\nNUMA:                    \n  NUMA node(s):          1\n  NUMA node0 CPU(s):     0-47\nVulnerabilities:         \n  Gather data sampling:  Unknown: Dependent on hypervisor status\n  Itlb multihit:         KVM: Mitigation: VMX unsupported\n  L1tf:                  Mitigation; PTE Inversion\n  Mds:                   Vulnerable: Clear CPU buffers attempted, no microcode; SMT Host state unkno\n                         wn\n  Meltdown:              Mitigation; PTI\n  Mmio stale data:       Vulnerable: Clear CPU buffers attempted, no microcode; SMT Host state unkno\n                         wn\n  Retbleed:              Vulnerable\n  Spec rstack overflow:  Not affected\n  Spec store bypass:     Vulnerable\n  Spectre v1:            Mitigation; usercopy/swapgs barriers and __user pointer sanitization\n  Spectre v2:            Mitigation; Retpolines, STIBP disabled, RSB filling, PBRSB-eIBRS Not affect\n                         ed\n  Srbds:                 Not affected\n  Tsx async abort:       Not affected","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"The following shows the specific GPU information of the g4dn.12xlarge instance used in this project.","category":"page"},{"location":"dev_env_info/","page":"Development Environment Information","title":"Development Environment Information","text":"ubuntu@ip-172-31-4-230:~/trixi_cuda$ nvidia-smi\nSat Dec 30 20:19:54 2023       \n+---------------------------------------------------------------------------------------+\n| NVIDIA-SMI 545.23.08              Driver Version: 545.23.08    CUDA Version: 12.3     |\n|-----------------------------------------+----------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n|                                         |                      |               MIG M. |\n|=========================================+======================+======================|\n|   0  Tesla T4                       On  | 00000000:00:1B.0 Off |                    0 |\n| N/A   20C    P8               8W /  70W |      2MiB / 15360MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n|   1  Tesla T4                       On  | 00000000:00:1C.0 Off |                    0 |\n| N/A   20C    P8              10W /  70W |      2MiB / 15360MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n|   2  Tesla T4                       On  | 00000000:00:1D.0 Off |                    0 |\n| N/A   21C    P8               9W /  70W |      2MiB / 15360MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n|   3  Tesla T4                       On  | 00000000:00:1E.0 Off |                    0 |\n| N/A   20C    P8               9W /  70W |      2MiB / 15360MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n                                                                                         \n+---------------------------------------------------------------------------------------+\n| Processes:                                                                            |\n|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n|        ID   ID                                                             Usage      |\n|=======================================================================================|\n|  No running processes found                                                           |\n+---------------------------------------------------------------------------------------+","category":"page"},{"location":"reference/#Public-APIs","page":"API Reference","title":"Public APIs","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"All APIs currently default to double precision (Float64). Single precision (Float32) is supported but still experimental, as it still needs testing to avoid type promotion. ","category":"page"},{"location":"reference/#TrixiCUDA.LobattoLegendreBasisGPU","page":"API Reference","title":"TrixiCUDA.LobattoLegendreBasisGPU","text":"LobattoLegendreBasisGPU([RealT = Float64,] polydeg::Integer)\n\nCreate a nodal Lobatto-Legendre basis for polynomials of degree polydeg, partially storing  and operating on GPU arrays (CuArray). This basis is designed for GPU-accelerated discontinuous  Galerkin spectral element method (DGSEM).\n\nwarning: Experimental implementation\nThis is an experimental feature and may change or be removed in future releases due to  ongoing performance optimizations.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiCUDA.DGSEMGPU","page":"API Reference","title":"TrixiCUDA.DGSEMGPU","text":"DGSEMGPU(; RealT = Float64,\n           polydeg::Integer,\n           surface_flux = flux_central,\n           surface_integral = SurfaceIntegralWeakForm(surface_flux),\n           volume_integral = VolumeIntegralWeakForm())\n\nCreate a discontinuous Galerkin spectral element method (DGSEM) optimized for GPU computations,  using a Lobatto-Legendre basis that is partially implemented on the GPU (LobattoLegendreBasisGPU).\n\nwarning: Experimental implementation\nThis is an experimental implementation and may change or be removed in future releases due to  ongoing performance optimizations.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiCUDA.SemidiscretizationHyperbolicGPU","page":"API Reference","title":"TrixiCUDA.SemidiscretizationHyperbolicGPU","text":"SemidiscretizationHyperbolicGPU(mesh, equations, initial_condition, solver;\n                                source_terms=nothing,\n                                boundary_conditions=boundary_condition_periodic,\n                                RealT=real(solver),\n                                uEltype=RealT,\n                                initial_cache_gpu=NamedTuple(),\n                                initial_cache_cpu=NamedTuple())\n\nConstruct a semidiscretization of a hyperbolic PDE for GPU-accelerated computations. This version  stores and manages computational caches on both GPU and CPU to achieve efficient data transfer.\n\nwarning: Experimental implementation\nThis is an experimental implementation and may change or be removed in future releases due to  ongoing performance optimizations.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiCUDA.semidiscretizeGPU","page":"API Reference","title":"TrixiCUDA.semidiscretizeGPU","text":"semidiscretizeGPU(semi::SemidiscretizationHyperbolicGPU, tspan)\n\nWrap the GPU-accelerated semidiscretization semi as an ODE problem over the time interval tspan, which can be solved using the SciML ecosystem.\n\nwarning: Experimental implementation\nThis is an experimental feature and may change or be removed in future releases due to  ongoing performance optimizations.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Private-APIs","page":"API Reference","title":"Private APIs","text":"","category":"section"},{"location":"reference/#Semidiscretization","page":"API Reference","title":"Semidiscretization","text":"","category":"section"},{"location":"reference/#TrixiCUDA.rhs_gpu!","page":"API Reference","title":"TrixiCUDA.rhs_gpu!","text":"rhs_gpu!(du, u, t, mesh, equations, boundary_conditions, source_terms, dg, cache_gpu, \n         cache_cpu)\n\nAssemble the semidiscrete right-hand side on the GPU. This routine orchestrates CUDA kernels for: volume integrals; prolongation to interior interfaces (and, in 2D/3D, to mortars with the associated mortar fluxes); interior-interface fluxes; boundary prolongation and boundary fluxes; surface accumulation; inverse-Jacobian scaling; and source terms.\n\nVariants:\n\nTreeMesh{1}:  no mortar stages.\nTreeMesh{2} /  TreeMesh{3}:  includes cuda_prolong2mortars! and cuda_mortar_flux!.\n\nEffects: writes results into du in place. Return value: nothing.\n\nNotes: reset_du!(du) is fused into the first kernel and therefore not called separately.\n\n\n\n\n\n","category":"function"},{"location":"reference/#GPU-Kernels-in-Semidiscretization","page":"API Reference","title":"GPU Kernels in Semidiscretization","text":"","category":"section"},{"location":"reference/#TrixiCUDA.cuda_volume_integral!","page":"API Reference","title":"TrixiCUDA.cuda_volume_integral!","text":"cuda_volume_integral!(du, u, mesh, nonconservative_terms, equations, volume_integral, dg,\n                      cache_gpu, cache_cpu)\n\nCompute the DG volume term on the GPU. This routine dispatches to the appropriate kernel  implementation depending on volume_integral and whether nonconservative_terms are present.\n\nVariants include:\n\nVolumeIntegralWeakForm  (classical weak form);\nVolumeIntegralFluxDifferencing  (split form using symmetric two-point flux) with and without non-conservative terms;\nVolumeIntegralShockCapturingHG  (hybrid DG–FV scheme using an indicator) with and without non-conservative terms.\n\nWrites into du in place. Returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiCUDA.cuda_prolong2interfaces!","page":"API Reference","title":"TrixiCUDA.cuda_prolong2interfaces!","text":"cuda_prolong2interfaces!(u, mesh, equations, cache)\n\nProlong the solution from element interiors to interior interfaces on the GPU. This prepares trace data used by interface flux kernels.\n\nWrites interface traces to cache.interfaces.u. Returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiCUDA.cuda_interface_flux!","page":"API Reference","title":"TrixiCUDA.cuda_interface_flux!","text":"cuda_interface_flux!(mesh, nonconservative_terms, equations, dg, cache)\n\nCompute numerical fluxes on interior interfaces on the GPU, with or without non-conservative terms.\n\nIf nonconservative_terms is False, use the conservative surface flux from  dg.surface_integral.surface_flux; if nonconservative_terms is True, take  both the conservative and non-conservative fluxes from it and accumulate both.\n\nWrites interface fluxes to cache.elements.surface_flux_values. Returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiCUDA.cuda_prolong2boundaries!","page":"API Reference","title":"TrixiCUDA.cuda_prolong2boundaries!","text":"cuda_prolong2boundaries!(u, mesh, boundary_conditions, equations, cache)\n\nProlong the solution from element interiors to physical boundaries on the GPU. For periodic boundaries this is a no-op method.\n\nVariants include:\n\nBoundaryConditionPeriodic  (no operation for periodic boundaries);\nNamedTuple (boundary conditions provided as a NamedTuple).\n\nWrites boundary traces to cache.boundaries.u when applicable. Returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiCUDA.cuda_boundary_flux!","page":"API Reference","title":"TrixiCUDA.cuda_boundary_flux!","text":"cuda_boundary_flux!(t, mesh, boundary_conditions, nonconservative_terms, equations, dg, \n                    cache)\n\nCompute numerical fluxes on physical boundaries on the GPU at time t. The flux implementation is taken from dg.surface_integral.surface_flux and may handle non-conservative contributions when requested. For periodic boundaries this is a no-op method.\n\nVariants include:\n\nBoundaryConditionPeriodic  (no operation for periodic boundaries);\nNamedTuple (boundary conditions provided as a NamedTuple) with and without non-conservative terms.\n\nWrites boundary flux contributions to cache.elements.surface_flux_values.  Returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiCUDA.cuda_prolong2mortars!","page":"API Reference","title":"TrixiCUDA.cuda_prolong2mortars!","text":"cuda_prolong2mortars!(u, mesh, cache_mortars, dg, cache)\n\nProlong the solution from element faces to mortar interfaces on the GPU for 2D/3D problems.\n\nWhen cache_mortars is True, fills the mortar trace buffers in cache.mortars using the appropriate transfer operators from dg.mortar. When cache_mortars is False, this is a no-op.\n\nWrites mortar trace buffers to cache.mortars (layout depends on dimension). Returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiCUDA.cuda_mortar_flux!","page":"API Reference","title":"TrixiCUDA.cuda_mortar_flux!","text":"cuda_mortar_flux!(mesh, cache_mortars, nonconservative_terms, equations, dg, cache)\n\nCompute numerical fluxes on mortar interfaces on the GPU for 2D/3D problems.\n\nUses dg.surface_integral.surface_flux; when nonconservative_terms is True, also includes the corresponding non-conservative partner flux. Contributions are assembled back to the element side via the reverse mortar maps. When cache_mortars is False, this is a no-op.\n\nWrites to cache.elements.surface_flux_values (via temporary mortar buffers). Returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiCUDA.cuda_surface_integral!","page":"API Reference","title":"TrixiCUDA.cuda_surface_integral!","text":"cuda_surface_integral!(du, mesh, equations, dg, cache)\n\nAccumulate interface and boundary fluxes into the element residual on the GPU using the DG surface integral with boundary interpolation weights.\n\nUpdates du in place. Returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiCUDA.cuda_jacobian!","page":"API Reference","title":"TrixiCUDA.cuda_jacobian!","text":"cuda_jacobian!(du, mesh, equations, cache)\n\nApply the inverse Jacobian and geometric scaling on the GPU to map reference operators to physical space as part of the semidiscretization.\n\nUpdates du in place. Returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiCUDA.cuda_sources!","page":"API Reference","title":"TrixiCUDA.cuda_sources!","text":"cuda_sources!(du, u, t, source_terms, equations, cache)\n\nEvaluate and add source terms on the GPU at time t. When source_terms is not presented, this method is a no-op.\n\nUpdates du in place. Returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"#TrixiCUDA.jl","page":"Home","title":"TrixiCUDA.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TrixiCUDA.jl is a component package of the Trixi.jl ecosystem and provides GPU acceleration support for solving hyperbolic partial differential equations (PDEs). ","category":"page"}]
}
